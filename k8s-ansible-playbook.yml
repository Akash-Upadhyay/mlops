---
- name: Deploy Application to Kubernetes
  hosts: localhost
  connection: local
  gather_facts: yes
  
  vars:
    backend_image: "{{ lookup('env', 'BACKEND_IMAGE') | default('catvsdog-backend:latest', true) }}"
    frontend_image: "{{ lookup('env', 'FRONTEND_IMAGE') | default('catvsdog-frontend:latest', true) }}"
    kubeconfig: "{{ lookup('env', 'KUBECONFIG') | default('~/.kube/config', true) }}"
    kubectl_opts: "--validate=false"
  
  tasks:
    - name: Verify Kubernetes connection
      shell: kubectl get nodes --kubeconfig={{ kubeconfig }}
      register: kubectl_test
      ignore_errors: yes
      
    - name: Display Kubernetes connection status
      debug:
        msg: "Kubernetes connection test result: {{ kubectl_test.rc == 0 }}"
        
    - name: Check if minikube is running
      when: kubectl_test.rc != 0
      shell: minikube status | grep Running
      register: minikube_status
      ignore_errors: yes
      
    - name: Start minikube if not running
      when: kubectl_test.rc != 0 and minikube_status.rc != 0
      shell: minikube start
      register: minikube_start
      ignore_errors: yes
      
    - name: Update kubeconfig with minikube context
      when: minikube_start.changed
      shell: |
        mkdir -p $(dirname {{ kubeconfig }})
        minikube update-context
        kubectl config view --flatten > {{ kubeconfig }}
      ignore_errors: yes
        
    - name: Create namespace if it doesn't exist
      shell: kubectl --kubeconfig={{ kubeconfig }} {{ kubectl_opts }} get namespace catvsdog || kubectl --kubeconfig={{ kubeconfig }} create namespace catvsdog
      register: namespace_result
      ignore_errors: yes
      
    - name: Display namespace creation result
      debug:
        msg: "Namespace creation result: {{ namespace_result.stdout }}"
      
    - name: Apply backend deployment
      shell: |
        cat <<EOF | kubectl --kubeconfig={{ kubeconfig }} {{ kubectl_opts }} apply -f -
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: backend-deployment
          namespace: catvsdog
        spec:
          replicas: 1
          selector:
            matchLabels:
              app: backend
          template:
            metadata:
              labels:
                app: backend
            spec:
              containers:
              - name: backend
                image: {{ backend_image }}
                ports:
                - containerPort: 8000
        EOF
      register: backend_deployment
      ignore_errors: yes
    
    - name: Display backend deployment result
      debug:
        msg: "Backend deployment status: {{ 'Success' if backend_deployment.rc == 0 else 'Failed' }}"
        
    - name: Apply backend service
      shell: |
        cat <<EOF | kubectl --kubeconfig={{ kubeconfig }} {{ kubectl_opts }} apply -f -
        apiVersion: v1
        kind: Service
        metadata:
          name: backend-service
          namespace: catvsdog
        spec:
          selector:
            app: backend
          ports:
          - port: 8000
            targetPort: 8000
          type: ClusterIP
        EOF
      register: backend_service
      ignore_errors: yes
      
    - name: Apply frontend deployment
      shell: |
        cat <<EOF | kubectl --kubeconfig={{ kubeconfig }} {{ kubectl_opts }} apply -f -
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: frontend-deployment
          namespace: catvsdog
        spec:
          replicas: 1
          selector:
            matchLabels:
              app: frontend
          template:
            metadata:
              labels:
                app: frontend
            spec:
              containers:
              - name: frontend
                image: {{ frontend_image }}
                ports:
                - containerPort: 80
        EOF
      register: frontend_deployment
      ignore_errors: yes
      
    - name: Display frontend deployment result
      debug:
        msg: "Frontend deployment status: {{ 'Success' if frontend_deployment.rc == 0 else 'Failed' }}"
    
    - name: Apply frontend service
      shell: |
        cat <<EOF | kubectl --kubeconfig={{ kubeconfig }} {{ kubectl_opts }} apply -f -
        apiVersion: v1
        kind: Service
        metadata:
          name: frontend-service
          namespace: catvsdog
        spec:
          selector:
            app: frontend
          ports:
          - port: 80
            targetPort: 80
          type: ClusterIP
        EOF
      register: frontend_service
      ignore_errors: yes
    
    - name: Apply ingress
      shell: |
        cat <<EOF | kubectl --kubeconfig={{ kubeconfig }} {{ kubectl_opts }} apply -f -
        apiVersion: networking.k8s.io/v1
        kind: Ingress
        metadata:
          name: catvsdog-ingress
          namespace: catvsdog
          annotations:
            nginx.ingress.kubernetes.io/rewrite-target: /\$2
        spec:
          rules:
          - host: catvsdog.example.com
            http:
              paths:
              - path: /backend(/|$)(.*)
                pathType: Prefix
                backend:
                  service:
                    name: backend-service
                    port:
                      number: 8000
              - path: /frontend(/|$)(.*)
                pathType: Prefix
                backend:
                  service:
                    name: frontend-service
                    port:
                      number: 80
              - path: /
                pathType: Prefix
                backend:
                  service:
                    name: frontend-service
                    port:
                      number: 80
        EOF
      register: ingress_result
      ignore_errors: yes
      
    - name: Display ingress deployment result
      debug:
        msg: "Ingress deployment status: {{ 'Success' if ingress_result.rc == 0 else 'Failed' }}"
    
    - name: Get service information
      shell: kubectl --kubeconfig={{ kubeconfig }} get svc -n catvsdog
      register: svc_info
      ignore_errors: yes
      
    - name: Display service information
      debug:
        msg: "{{ svc_info.stdout_lines }}"
        
    - name: Get ingress information
      shell: kubectl --kubeconfig={{ kubeconfig }} get ing -n catvsdog
      register: ing_info
      ignore_errors: yes
      
    - name: Display ingress information
      debug:
        msg: "{{ ing_info.stdout_lines }}"
        
    - name: Add host entry for local testing
      become: yes
      become_method: sudo
      ignore_errors: yes
      shell: |
        if ! grep -q "catvsdog.example.com" /etc/hosts; then
          echo "127.0.0.1 catvsdog.example.com" >> /etc/hosts
        fi
      
    - name: Provide access information
      debug:
        msg: |
          Deployment completed. Access your application at:
          
          Frontend: http://catvsdog.example.com/frontend
          Backend API: http://catvsdog.example.com/backend
          
          Note: Make sure to add 'catvsdog.example.com' to your hosts file pointing to your cluster IP.
          If using Minikube, you can get the IP with 'minikube ip' 