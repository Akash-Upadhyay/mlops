- name: Deploy ML Application to Kubernetes
  hosts: local
  become: false
  vars:
    frontend_image: mt2024013/catvsdog-frontend:latest
    backend_image: mt2024013/catvsdog:latest
  tasks:
    - name: Check if kubectl is installed
      command: which kubectl
      register: kubectl_check
      ignore_errors: true
      changed_when: false

    - name: Fail if kubectl is not installed
      fail:
        msg: "kubectl is not installed. Please install kubectl first."
      when: kubectl_check.rc != 0

    - name: Create k8s directory if it doesn't exist
      file:
        path: "{{ playbook_dir }}/k8s"
        state: directory
        mode: '0755'
        
    # Force pull the latest backend image
    - name: Pull latest backend Docker image
      command: docker pull {{ backend_image }}
      register: backend_pull
      changed_when: backend_pull.rc == 0
        
    # Force pull the latest frontend image
    - name: Pull latest frontend Docker image
      command: docker pull {{ frontend_image }}
      register: frontend_pull
      changed_when: frontend_pull.rc == 0

    # Update backend deployment to use the latest image
    - name: Update backend deployment with latest image
      command: kubectl set image deployment/catvsdog-backend backend={{ backend_image }}
      register: backend_update
      ignore_errors: true
      changed_when: backend_update.rc == 0

    # Apply backend deployment and service if updating failed (likely because deployment doesn't exist yet)
    - name: Apply backend deployment and service
      command: kubectl apply -f {{ playbook_dir }}/k8s/backend-deployment.yaml
      register: backend_apply
      changed_when: backend_apply.rc == 0
      when: backend_update.failed

    # Wait for backend deployment to be ready
    - name: Wait for backend deployment to be ready
      command: kubectl rollout status deployment/catvsdog-backend
      register: backend_status
      changed_when: false

    # Update frontend deployment to use the latest image
    - name: Update frontend deployment with latest image
      command: kubectl set image deployment/catvsdog-frontend frontend={{ frontend_image }}
      register: frontend_update
      ignore_errors: true
      changed_when: frontend_update.rc == 0

    # Apply frontend deployment and service if updating failed
    - name: Apply frontend deployment and service
      command: kubectl apply -f {{ playbook_dir }}/k8s/frontend-deployment.yaml
      register: frontend_apply
      changed_when: frontend_apply.rc == 0
      when: frontend_update.failed

    # Wait for frontend deployment to be ready
    - name: Wait for frontend deployment to be ready
      command: kubectl rollout status deployment/catvsdog-frontend
      register: frontend_status
      changed_when: false
      
    # Apply the ingress configuration
    - name: Apply ingress configuration
      command: kubectl apply -f {{ playbook_dir }}/k8s/ingress.yaml
      register: ingress_apply
      changed_when: ingress_apply.rc == 0

    # Get service information
    - name: Get frontend service NodePort
      command: kubectl get service catvsdog-frontend-service -o=jsonpath='{.spec.ports[0].nodePort}'
      register: frontend_port
      changed_when: false

    - name: Display access information
      debug:
        msg: |
          Application deployed successfully.
          Frontend is accessible at:
          - http://localhost:{{ frontend_port.stdout }}
          - http://catvsdog.example.com/frontend (if DNS is configured)
          - http://catvsdogclasifier.com/frontend (if DNS is configured) 