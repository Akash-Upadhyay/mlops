---
# Ansible Playbook to Deploy Cat vs Dog Classifier to Kubernetes
- name: Deploy Cat vs Dog Classifier to Kubernetes
  hosts: local
  connection: local
  become: false
  vars:
    backend_image: mt2024013/catvsdog:latest
    frontend_image: mt2024013/catvsdog-frontend:latest
    namespace: default
  
  tasks:
    # - name: Set KUBECONFIG environment variable
    #   # hosts: localhost
    #   vars:
    #     kubeconfig_path: "/home/akash/.kube/config"
    #   environment:
    #     KUBECONFIG: "{{ kubeconfig_path }}"

    - name: Check if Minikube is running
      shell: "minikube status | grep -q 'host: Running'"
      register: minikube_status
      ignore_errors: true
      changed_when: false

    - name: Start Minikube if not running
      shell: minikube start
      when: minikube_status.rc != 0

    - name: Set the Minikube context for kubectl
      command: kubectl config use-context minikube
      environment:
        KUBECONFIG: /home/akash/.kube/config


    - name: Pull latest backend image from Docker Hub
      command: docker pull {{ backend_image }}
      register: backend_pull
      changed_when: backend_pull.rc == 0

    - name: Pull latest frontend image from Docker Hub
      command: docker pull {{ frontend_image }}
      register: frontend_pull
      changed_when: frontend_pull.rc == 0

    - name: Load backend image into Minikube
      command: minikube image load {{ backend_image }}
      when: backend_pull is success

    - name: Load frontend image into Minikube
      command: minikube image load {{ frontend_image }}
      when: frontend_pull is success

    # - name: Delete existing frontend deployment if exists
    #   command: kubectl delete deployment catvsdog-frontend
    #   become: true
    #   ignore_errors: true

    # - name: Delete existing backend deployment if exists
    #   command: kubectl delete deployment catvsdog-backend
    #   become: true
    #   ignore_errors: true

    # - name: Delete existing frontend service if exists
    #   command: kubectl delete service catvsdog-frontend-service
    #   become: true
    #   ignore_errors: true

    # - name: Delete existing backend service if exists
    #   command: kubectl delete service catvsdog-backend-service
    #   become: true
    #   ignore_errors: true

    - name: Debug - Check if kubectl can access pods
      shell: |
        export KUBECONFIG=/home/akash/.kube/config
        kubectl get pods -A
      register: kubectl_output
      ignore_errors: true

    - name: Print kubectl get pods output
      debug:
        var: kubectl_output.stdout_lines

    - name: Fail if kubectl can't authenticate
      fail:
        msg: "kubectl failed to authenticate. Check KUBECONFIG or Minikube context."
      when: kubectl_output.rc != 0

    # - name: Apply backend deployment
    #   command: kubectl apply -f /home/akash/mlops_project/k8s/backend-deployment.yaml
    #   become: true
    #   register: backend_deployment

    - name: Apply backend deployment
      command:
        cmd: kubectl apply --validate=false -f /home/akash/mlops_project/k8s/backend-deployment.yaml
      environment:
        KUBECONFIG: /home/akash/.kube/config


    # - name: Apply frontend deployment
    #   command: kubectl apply -f k8s/frontend-deployment.yaml
    #   become: true
    #   register: frontend_deployment

    - name: Apply frontend deployment
      command:
        cmd: kubectl apply --validate=false -f /home/akash/mlops_project/k8s/frontend-deployment.yaml
      environment:
        KUBECONFIG: /home/akash/.kube/config

    # - name: Wait for pods to be ready
    #   shell: kubectl wait --for=condition=Ready pod -l app=catvsdog --timeout=120s
    #   become: true
    #   register: ready_wait
    #   ignore_errors: true

    - name: Apply ingress
      command:
        cmd: kubectl apply --validate=false -f /home/akash/mlops_project/k8s/ingress_new.yaml
      environment:
        KUBECONFIG: /home/akash/.kube/config

    - name: Apply backend HPA
      command:
        cmd: kubectl apply --validate=false -f /home/akash/mlops_project/k8s/backend-hpa.yaml
      environment:
        KUBECONFIG: /home/akash/.kube/config
      register: backend_hpa
      
    - name: Apply frontend HPA
      command:
        cmd: kubectl apply --validate=false -f /home/akash/mlops_project/k8s/frontend-hpa.yaml
      environment:
        KUBECONFIG: /home/akash/.kube/config
      register: frontend_hpa

    - name: Enable metrics-server if not already enabled
      command: minikube addons enable metrics-server
      ignore_errors: true

    # Deploy monitoring components
    - name: Create monitoring directory if it doesn't exist
      file:
        path: /home/akash/mlops_project/k8s/monitoring
        state: directory
        mode: '0755'
      
    - name: Apply Prometheus configuration
      command:
        cmd: kubectl apply --validate=false -f /home/akash/mlops_project/k8s/monitoring/prometheus-config.yaml
      environment:
        KUBECONFIG: /home/akash/.kube/config
      ignore_errors: true
      
    - name: Apply Prometheus deployment
      command:
        cmd: kubectl apply --validate=false -f /home/akash/mlops_project/k8s/monitoring/prometheus-deployment.yaml
      environment:
        KUBECONFIG: /home/akash/.kube/config
      ignore_errors: true
      
    - name: Apply Grafana configuration
      command:
        cmd: kubectl apply --validate=false -f /home/akash/mlops_project/k8s/monitoring/grafana-config.yaml
      environment:
        KUBECONFIG: /home/akash/.kube/config
      ignore_errors: true
      
    - name: Apply Grafana dashboards
      command:
        cmd: kubectl apply --validate=false -f /home/akash/mlops_project/k8s/monitoring/grafana-dashboards.yaml
      environment:
        KUBECONFIG: /home/akash/.kube/config
      ignore_errors: true
      
    - name: Apply Grafana deployment
      command:
        cmd: kubectl apply --validate=false -f /home/akash/mlops_project/k8s/monitoring/grafana-deployment.yaml
      environment:
        KUBECONFIG: /home/akash/.kube/config
      ignore_errors: true
      
    - name: Apply ServiceMonitor configuration
      command:
        cmd: kubectl apply --validate=false -f /home/akash/mlops_project/k8s/monitoring/service-monitor.yaml
      environment:
        KUBECONFIG: /home/akash/.kube/config
      ignore_errors: true

    - name: Wait for pods to be ready
      shell: kubectl wait --for=condition=Ready pod -l app=catvsdog --timeout=120s
      environment:
        KUBECONFIG: "/home/akash/.kube/config"

    # - name: Get pod status
    #   command: kubectl get pods -l app=catvsdog
    #   become: true
    #   register: pod_status

    - name: Get pod status
      command: kubectl get pods -l app=catvsdog
      environment:
        KUBECONFIG: "/home/akash/.kube/config"
      register: pod_status

    - name: Get HPA status
      command: kubectl get hpa
      environment:
        KUBECONFIG: "/home/akash/.kube/config"
      register: hpa_status
      
    - name: Get monitoring status
      command: kubectl get pods -l "app in (prometheus, grafana)"
      environment:
        KUBECONFIG: "/home/akash/.kube/config"
      register: monitoring_status
      ignore_errors: true

    - name: Get application URLs
      shell: |
        FRONTEND_URL="http://$(minikube ip):$(kubectl get svc catvsdog-frontend-service -o jsonpath='{.spec.ports[0].nodePort}')"
        BACKEND_URL="http://$(minikube ip):$(kubectl get svc catvsdog-backend-service -o jsonpath='{.spec.ports[0].nodePort}')"
        PROMETHEUS_URL="http://$(minikube ip):$(kubectl get svc prometheus-service -o jsonpath='{.spec.ports[0].nodePort}')"
        GRAFANA_URL="http://$(minikube ip):$(kubectl get svc grafana-service -o jsonpath='{.spec.ports[0].nodePort}')"
        echo "Frontend URL: $FRONTEND_URL"
        echo "Backend URL: $BACKEND_URL"
        echo "Prometheus URL: $PROMETHEUS_URL"
        echo "Grafana URL: $GRAFANA_URL (admin/admin)"
      register: app_urls
      ignore_errors: true

    - name: Display application status
      debug:
        msg: 
          - "Deployment status:"
          - "{{ pod_status.stdout_lines }}"
          - "HPA status:"
          - "{{ hpa_status.stdout_lines }}"
          - "Monitoring status:"
          - "{{ monitoring_status.stdout_lines | default(['No monitoring pods found']) }}"
          - "{{ app_urls.stdout_lines | default(['URLs could not be retrieved']) }}"